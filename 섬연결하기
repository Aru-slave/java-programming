import java.util.*;

class Solution {
    public int solution(int n, int[][] costs) {
        int answer = 0;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        Arrays.sort(costs, (a, b) -> a[2]-b[2]); // 간선의 가중치 오름차순으로 정렬
        
        for (int i = 0; i < costs.length; i++) {
            int u = costs[i][0];
            int v = costs[i][1];
            int w = costs[i][2];
            
            int root1 = find(parent, u);
            int root2 = find(parent, v);
            
            if (root1 != root2) { // 두 노드가 같은 집합에 속하지 않는 경우
                parent[root2] = root1; // v의 부모 노드를 u로 설정
                answer += w; // 가중치를 더해줌
            }
        }
        return answer;
    }
    
    public int find(int[] parent, int node) { // 노드의 부모 노드를 찾는 함수
        if (parent[node] == node) {
            return node;
        }
        return find(parent, parent[node]);
    }
}
